/*
MIT License

Copyright (c) 2021 Bj√∂rn Sundin

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#ifndef AVO_ID_HPP_BJORN_SUNDIN_JUNE_2021
#define AVO_ID_HPP_BJORN_SUNDIN_JUNE_2021

#include <fmt/format.h>

namespace avo {

/*
	To generate a new unique ID, use the function Id::next().
	To create an ID with a specific value (not guaranteed to be unique), use the constructor.
	An ID which converts to Id::value_type{} is considered invalid, and is the default value.
*/
class Id final {
public:
	using value_type = std::uint64_t;

	[[nodiscard]]
	constexpr explicit operator value_type() const noexcept {
		return _count;
	}
	[[nodiscard]]
	constexpr operator bool() const noexcept {
		return _count;
	}

	[[nodiscard]]
	constexpr value_type value() const noexcept {
		return _count;
	}

	[[nodiscard]]
	constexpr bool operator==(Id const& id) const = default;

	Id() = default;
	constexpr explicit Id(value_type const id) noexcept :
		_count{id}
	{}

	/*
		Generates a new unique ID, assuming all IDs are generated by this function.
	*/
	[[nodiscard]]
	static Id next() noexcept {
		static auto counter = value_type{};
		return Id{++counter};
	}

private:
	value_type _count{};
};

} // namespace avo

template<>
struct fmt::formatter<avo::Id> : fmt::formatter<avo::Id::value_type> {
	auto format(avo::Id const id, auto& context) {
		return formatter<avo::Id::value_type>::format(id.value(), context);
	}
};

template<>
struct std::hash<avo::Id> {
	std::size_t operator()(avo::Id const id) const noexcept {
		return hash<avo::Id::value_type>{}(id.value());
	}
};

#endif
